<extraction><id>#7</id><title>Remote Config</title><description> binarybucks/mqttitude#312</description><comments>Hi @jpmens @binarybucks ,
do you have any update on this one?  Is it something I could help on? Sure you can help. I suggest you head over to the wiki and look how iOS does it? Maybe @binarybucks can say how he intended doing it? @massimilianozilio it would be awesome if you could add this bit. Basically read configuration messages in ServiceBroker, create a new event from it (e.g. ConfigurationMessageReceived) and subscribe to that event in ServiceApplication. From there, just pass the message JSON to Preferences.fromJsonObject(). Also check if the user has remote config enabled ;) While you're at it. Maybe you are smarter than me and get android to recognize that OwnTracks is associated with .otrc files so exported config files can be opened by the app. If you can read those file, you can also pass them to the same fromJsonObject() method to complete config import from files.  First part:I have made these changes and everything seems to work fine. I have done some testing using mosquitto_pub to send a "configuration" type message but I haven't tested that all preferences are getting set correctly by Preferences.fromJsonObject().  Has this been tested before?
Also let me know if the event should be a sticky one or not and you decide between the two for my understanding.thanks -Has this been tested before?
not yet. Maybe you would also have to reconnect to the new broker if specified -if the event should be a sticky one or not and you decide between the two for my understanding.
it should not be sticky. There is no need to new subscribing code parts to receive the config message again. In contrast to location messages that are sticky as some code parts need the last received location.  Hi,I have implemented and tested this part  by importing new configurations which specify different brokers and connection preferences. The transition between the current and new configuration as the switching between different brokers seem to work fine.   The different  configurations have been imported via the following 3 routes:I have read many posts on file extension association in Android and it looks like Android only care about mimeTypes, not file extensions. Please see these two links for more details:.otrc files have an "appliacation/octet-stream" mimeType but given that this is a generic mimeType I didn't manage to achieve a 1-2-1 association between the otrc file ext and the Owntracks app. Adding a custom mimetype doesn't seem to be an option too so a better solution could be to create .otrc file which uses a more specific and restrictive mimetype (e.g. application/json). However, with the code that I am going to submit:I'll raise  a pull request tomorrow so that you can have a look at the code and let me know if you have any suggestion or question.  It would be good if we could discuss this topic this week as  I will be travelling for an extended period starting from the 20th of Nov.Massimiliano Hi, that sounds really great. 
Just send me a pull request and I'll have a look. Regarding the mimeTypes I was also unable to get it working.There's a lot of documentation and exampes about it but none of them seem to actually work. Instead of exporting .otrc files with appliacation/octet-stream can we not export them with a custom mimetype such as application/otrc and associate that with our app?  The problem is that whatever mimeType we set using   sendIntent.setType("text/plain"); is ignored by the email client that receive the Intent.  It is the email client that set the mimetype to application/octet-stream so there is nothing we can do about it.   Hi, 
did you have a chance to have a look at the code that I submitted ? I'm hoping @binarybucks will get a chance to look at this.  Me too... Commits are merged. Need testing. I'll test if I get an .apk Have to sort out several other bugs first.  No complaints so far. Open more specific issues on this if they occur. </comments></extraction>